name: Deploy AuthSphere to AWS EC2

on:
  push:
    branches:
      - main # Runs only when changes are pushed to main branch

env:
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  ALGORITHM: ${{ secrets.ALGORITHM }}
  ACCESS_TOKEN_EXPIRE: ${{ secrets.ACCESS_TOKEN_EXPIRE }}
  REFRESH_TOKEN_EXPIRE: ${{ secrets.REFRESH_TOKEN_EXPIRE }}
  EXPIRED_TOKEN: ${{ secrets.EXPIRED_TOKEN }}
  DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
  DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
  MYSQL_ROOT_PASSWORD: ${{secrets.MYSQL_ROOT_PASSWORD}}

jobs:
  test:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Print Working Directory
        run: pwd

      - name: List repository files
        run: ls -laR

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install python-dotenv

      - name: Collect tests for debugging
        run: pytest --collect-only

      - name: Run test with verbose output
        run: pytest -vv tests/ # Run tests

  deploy:
    needs: test
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t $DOCKER_USERNAME/authsphere:latest .
          docker push $DOCKER_USERNAME/authsphere:latest

      - name: Prepare EC2 Directories
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            sudo chmod -R 777 /home/ubuntu/authsphere

      # Copy docker-compose.yml and db/ to EC2
      - name: docker-compose.yml and db/ to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "docker-compose.yml,db_init/"
          target: "/home/ubuntu/authsphere/"
          debug: true

      - name: Verify SQL File on EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}

          script: |
            # Check for null bytes
            if grep -qP '\x00' /home/ubuntu/authsphere/db_init/init.sql; then
              echo "ERROR: Null bytes detected in init.sql"
              exit 1
            fi

            # Verify line endings
            file /home/ubuntu/authsphere/db_init/init.sql

            # Show first 20 lines
            head -n 20 /home/ubuntu/authsphere/db_init/init.sql

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          envs: DOCKER_USERNAME,DOCKER_PASSWORD,MYSQL_ROOT_PASSWORD # Pass secrets as env variables
          script: |

            # Install Docker if missing
            if ! command -v docker &> /dev/null; then
                echo "Installing Docker..."
                curl -fsSL https://get.docker.com | sudo sh
            fi

            # Install Docker Compose plugin with proper repo setup
            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

            # Verify installations
            sudo docker --version
            sudo docker compose version

            # Clean up Docker resources to free space
            sudo docker system prune -f
            sudo docker volume prune -f

            printf "%s" "$DOCKER_PASSWORD" | sudo docker login -u "$DOCKER_USERNAME" --password-stdin
            sudo docker pull $DOCKER_USERNAME/authsphere:latest

            sudo -E docker compose -f /home/ubuntu/authsphere/docker-compose.yml down -v
            sudo chmod +r /home/ubuntu/authsphere/db_init/init.sql


            sudo -E docker compose -f /home/ubuntu/authsphere/docker-compose.yml up -d

            sleep 10
            sudo -E docker logs authsphere-mariadb-1
